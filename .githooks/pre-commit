#!/bin/bash
#
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#

echo "Running pre-commit hook"
REPO_DIR=$(git rev-parse --show-toplevel)
if [[ "$BRANCH" =~ ^(master|main)$ ]]; then
	REACT_APP_NODE_ENV = "production"
else
	REACT_APP_NODE_ENV = "development"

fi
# copy this file to the git hooks directory
cp "$REPO_DIR/.githooks/pre-commit" "$REPO_DIR/.git/hooks/"
cd "$REPO_DIR/frontend"


if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2


# If there are whitespace errors, print the offending file names and fail.
echo "Checking for whitespace errors..."
git diff-index --check --cached $against --
if [ $? -ne 0 ]; then
	echo "White space errors detected"
	exit 1
fi
echo "No whitespace errors found."

# run npm tests
echo "Running npm tests"
npm i cross-env --save-dev
if [[ "$BRANCH" =~ ^(master|main)$ ]]; then
	export CI=true # enforce CI mode (treat warnings as errors)
	npm run build-ci
	if [ $? -ne 0 ]; then
	echo "npm run build-ci failed"
	exit 1
	fi
fi

npm run test-ci
if [ $? -ne 0 ]; then
  echo "npm run test-ci failed"
  exit 1
fi

# run python tests
cd "$REPO_DIR/backend"

if [[ -z "$VIRTUAL_ENV" ]]; then
    echo "No VIRTUAL_ENV set"
	python -m virualenv venv
	cp venv/Scripts venv/bin # fix to make virtualenv cross-platform
	source venv/bin/activate
	pip install -r requirements.txt
else
    echo "VIRTUAL_ENV is set"
	cp venv/Scripts venv/bin # fix to make virtualenv cross-platform
	source venv/bin/activate
	pip install -r requirements.txt
fi

echo "Testing python code quality in backend"
python -m pylint --fail-under=8 --recursive=y ./nextGeneration ./interactive_testing.py ./local_test.py

if [ $? -ne 0 ]; then
  echo "pylint failed, check output."
  exit 1

fi

cd "$REPO_DIR/"

echo "Testing python code complexity in backend"

xenon --max-absolute B --max-modules A --max-average A -i "venv" "backend"
if [ $? -ne 0 ]; then
  echo "xenon (radon) failed, reduce complexity."
  exit 1
fi

echo "Running python tests"
python -m unittest discover -s "$REPO_DIR" -p '*test.py'
if [ $? -ne 0 ]; then
  echo "python tests failed"
  exit 1
fi


# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi
